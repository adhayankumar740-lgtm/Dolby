import os
import asyncio
from typing import Union

# --- Zaroori Libraries ---
from pyrogram import Client, filters
from pyrogram.errors import UserAlreadyParticipant
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

from pytgcalls import PyTgCalls, idle
from pytgcalls.types import AudioPiped, HighQualityAudio

import yt_dlp
from youtube_search import YoutubeSearch

# --- Configuration ---
# Yeh saari values aapko Render jaise platform par "Environment Variables" me daalni hongi.
# Abhi ke liye, aap inhein yahan test karne ke liye daal sakte hain.

API_ID = int(os.environ.get("API_ID", "12345")) # Apna API ID daalein
API_HASH = os.environ.get("API_HASH", "your_api_hash") # Apna API HASH daalein
BOT_TOKEN = os.environ.get("BOT_TOKEN", "your_bot_token") # Apna BOT TOKEN daalein
 = os.environ.get("STRING_SESSION", "your_session_string") # Aapka STRING SESSION
LOG_GROUP_ID = int(os.environ.get("LOG_GROUP_ID", "-100...")) # Aapka LOG GROUP ID

# --- Global Variables ---
bot = Client("MusicBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
userbot = Client(name="MusicUserbot", api_id=API_ID, api_hash=API_HASH, session_string=SESSION_STRING)
pytgcalls = PyTgCalls(userbot)

# --- Helper Functions ---
def search_youtube(query: str):
    """YouTube par video search karta hai."""
    try:
        results = YoutubeSearch(query, max_results=1).to_dict()
        if results:
            video = results[0]
            return {
                "title": video["title"],
                "link": f"https://www.youtube.com{video['url_suffix']}",
                "id": video["id"],
            }
    except Exception as e:
        print(f"YouTube search error: {e}")
        return None

def download_audio(link: str) -> str:
    """YouTube link se audio download karta hai aur file path return karta hai."""
    ydl_opts = {
        "format": "bestaudio/best",
        "outtmpl": "downloads/%(id)s.mp3", # File ko mp3 format me save karega
        "noplaylist": True,
        "quiet": True,
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(link, download=True)
        return os.path.join("downloads", f"{info['id']}.mp3")

# --- Bot Command Handlers ---
@bot.on_message(filters.command(["start", "help"]))
async def start_handler(_, message: Message):
    await message.reply_text(
        "**Namaste! Main ek VC Music Bot hoon.**\n\n"
        "**Commands:**\n"
        "`/play [gaane ka naam ya youtube link]` - Gaana chalane ke liye.\n"
        "`/stop` - Gaana band karke VC se jaane ke liye.\n\n"
        "**Note:** Pehle group me Voice Chat shuru karein."
    )

@bot.on_message(filters.command(["play"]))
async def play_handler(_, message: Message):
    chat_id = message.chat.id
    query = " ".join(message.command[1:])

    if not query:
        return await message.reply_text("❓ **Kya chalana hai?** Gaane ka naam likhein.\n\n**Jaise:** `/play Shape of You`")

    status_msg = await message.reply_text("🔄 `Khoj raha hoon...`")

    video_info = search_youtube(query)
    if not video_info:
        return await status_msg.edit("❌ `Maaf kijiye, gaana nahi mila.`")

    await status_msg.edit("📥 `Downloading...`")
    
    try:
        audio_file_path = download_audio(video_info["link"])
    except Exception as e:
        print(e)
        return await status_msg.edit(f"**Error:** Download nahi ho paya.\n`{e}`")

    await status_msg.edit("🔄 `VC join kar raha hoon...`")

    try:
        await pytgcalls.join_group_call(
            chat_id,
            AudioPiped(audio_file_path, audio_parameters=HighQualityAudio()),
        )
        await status_msg.edit(
            f"▶️ **Abhi chal raha hai:**\n"
            f"🎵 **Naam:** `{video_info['title']}`"
        )
    except UserAlreadyParticipant:
        # Agar pehle se VC me hai, to bas gaana badal do
        await pytgcalls.change_stream(
            chat_id,
            AudioPiped(audio_file_path, audio_parameters=HighQualityAudio()),
        )
        await status_msg.edit(
            f"▶️ **Abhi chal raha hai:**\n"
            f"🎵 **Naam:** `{video_info['title']}`"
        )
    except Exception as e:
        return await status_msg.edit(f"**Error:** VC join nahi kar paya.\n`{e}`")

@bot.on_message(filters.command(["stop"]))
async def stop_handler(_, message: Message):
    chat_id = message.chat.id
    try:
        await pytgcalls.leave_group_call(chat_id)
        await message.reply_text("⏹️ Gaana band kar diya gaya hai aur VC chhod diya hai.")
    except Exception as e:
        await message.reply_text(f"**Error:** VC nahi chhod paya.\n`{e}`")


# --- Main Function ---
async def main():
    # Directories banayein
    if not os.path.isdir("downloads"):
        os.makedirs("downloads")

    print("Bot shuru ho raha hai...")
    await bot.start()
    await userbot.start()
    await pytgcalls.start()

    # Bot online hone ka message bhejega
    await bot.send_message(LOG_GROUP_ID, "✅ **Bot ab online hai!**")
    print("Bot online hai aur commands ke liye taiyar hai.")
    
    await idle() # Bot ko chalu rakhega

    print("Bot band ho raha hai...")
    await bot.stop()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
